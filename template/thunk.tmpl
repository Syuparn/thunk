// Code generated by thunk; DO NOT EDIT.
package {{(pkg).Name}}

{{range $interfaceName, $interface := .}}
type Lazy{{$interfaceName}} struct {
	inner {{$interfaceName}}
}

{{range $methodName, $method := $interface.Methods}}
func (l *Lazy{{$interfaceName}}) {{$methodName}}({{range $method.Signature.Params}}
	{{- if (and $method.Signature.Variadic (eq . (last $method.Signature.Params)))}}
        	{{- .Name}} ...{{(slice .Type).Elem}},
	{{- else}}
        	{{- .Name}} {{.Type}},
	{{- end}}
{{- end}}) func() ({{range $method.Signature.Results}}
        {{- .Name}} {{.Type}},
{{- end}}) {
	return func() ({{range $method.Signature.Results}}
        {{- .Name}} {{.Type}},
{{- end}}) {
		return l.inner.{{$methodName}}({{range $method.Signature.Params}}
			{{- .Name}},
		{{- end}})
	}
}
{{end}}

func NewLazy{{$interfaceName}}(inner {{$interfaceName}}) *Lazy{{$interfaceName}} {
	return &Lazy{{$interfaceName}}{inner: inner}
}
{{end}}
