// Code generated by thunk; DO NOT EDIT.
package {{(pkg).Name}}

{{range $interfaceName, $interface := .}}
type Lazy{{$interfaceName}} struct {
	inner {{$interfaceName}}
}

{{range $methodName, $method := $interface.Methods}}
func (l *Lazy{{$interfaceName}}) {{$methodName}}(
	{{- template "parameters" $method -}}
) func() ({{template "results" $method}}) {
	return func() ({{template "results" $method}}) {
		return l.inner.{{$methodName}}({{template "paramNames" $method}})
	}
}
{{end}}

func NewLazy{{$interfaceName}}(inner {{$interfaceName}}) *Lazy{{$interfaceName}} {
	return &Lazy{{$interfaceName}}{inner: inner}
}
{{end}}

{{- /* templates */ -}}

{{- /* parameters generates function parameters. $ should be method. */ -}}
{{- define "parameters" -}}
	{{- $method := $ -}}
	{{- range $i, $param := $method.Signature.Params -}}
		{{- /* extract param name or generate it if not defined */ -}}
		{{- $name := $param.Name -}}
		{{- if not $name -}}
			{{- $name = printf "arg%d" $i -}}
		{{- end -}}

		{{- if (and $method.Signature.Variadic (eq $param (last $method.Signature.Params))) -}}
			{{- $name}} ...{{(slice $param.Type).Elem}},
		{{- else -}}
			{{- $name}} {{$param.Type}},
		{{- end -}}
	{{- end -}}
{{- end -}}

{{- /* results generates function return types. $ should be method. */ -}}
{{- define "results" -}}
	{{- $method := $ -}}
	{{- range $method.Signature.Results -}}
        {{- .Name}} {{.Type}},
	{{- end -}}
{{- end -}}

{{- /* paramNames generates function parameter names. $ should be method. */ -}}
{{- define "paramNames" -}}
	{{- $method := $ -}}
	{{- range $i, $param := $method.Signature.Params -}}
		{{- /* extract param name or generate it if not defined */ -}}
		{{- $name := $param.Name -}}
		{{- if not $name -}}
			{{- $name = printf "arg%d" $i -}}
		{{- end -}}

		{{- if (and $method.Signature.Variadic (eq $param (last $method.Signature.Params))) -}}
			{{- $name}}...,
		{{- else -}}
			{{- $name}},
		{{- end -}}
	{{- end -}}
{{- end -}}
