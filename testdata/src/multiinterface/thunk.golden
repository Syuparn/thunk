// Code generated by thunk; DO NOT EDIT.
package multiinterface

type LazyA struct {
	inner A
}

func (l *LazyA) Foo(a int) func() {
	return func() {
		l.inner.Foo(a)
	}
}

func NewLazyA(inner A) *LazyA {
	return &LazyA{inner: inner}
}

type LazyB struct {
	inner B
}

func (l *LazyB) Bar(b string) func() {
	return func() {
		l.inner.Bar(b)
	}
}

func NewLazyB(inner B) *LazyB {
	return &LazyB{inner: inner}
}
