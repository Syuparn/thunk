// Code generated by thunk; DO NOT EDIT.
package multifile

type LazyA struct {
	inner A
}

func (l *LazyA) Foo(a int) func() {
	return func() {
		return l.inner.Foo(a)
	}
}

func NewLazyA(inner A) *LazyA {
	return &LazyA{inner: inner}
}

type LazyB struct {
	inner B
}

func (l *LazyB) Bar(b string) func() {
	return func() {
		return l.inner.Bar(b)
	}
}

func NewLazyB(inner B) *LazyB {
	return &LazyB{inner: inner}
}

type LazyC struct {
	inner C
}

func (l *LazyC) Baz(c float64) func() {
	return func() {
		return l.inner.Baz(c)
	}
}

func NewLazyC(inner C) *LazyC {
	return &LazyC{inner: inner}
}
