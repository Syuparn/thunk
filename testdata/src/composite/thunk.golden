// Code generated by thunk; DO NOT EDIT.
package composite

type LazyA struct {
	inner A
}

func (l *LazyA) Array(obj [4]string) func() {
	return func() {
		l.inner.Array(obj)
	}
}

func (l *LazyA) Chan(obj1 chan int, obj2 <-chan string, obj3 chan<- float64) func() {
	return func() {
		l.inner.Chan(obj1, obj2, obj3)
	}
}

func (l *LazyA) Func(obj1 func(), obj2 func(int, string) error) func() {
	return func() {
		l.inner.Func(obj1, obj2)
	}
}

func (l *LazyA) Map(obj map[int]string) func() {
	return func() {
		l.inner.Map(obj)
	}
}

func (l *LazyA) Pointer(obj *int) func() {
	return func() {
		l.inner.Pointer(obj)
	}
}

func (l *LazyA) Slice(obj []string) func() {
	return func() {
		l.inner.Slice(obj)
	}
}

func (l *LazyA) Struct(obj struct{ a int }) func() {
	return func() {
		l.inner.Struct(obj)
	}
}

func NewLazyA(inner A) *LazyA {
	return &LazyA{inner: inner}
}
